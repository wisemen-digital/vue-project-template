// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { MigrateCollectionsV1Data, MigrateCollectionsV1Error, ImportCollectionsV1Data, ImportCollectionsV1Error, ViewCollectionsV1Data, ViewCollectionsV1Error, SetUserRolesV1Data, SetUserRolesV1Error, ViewMeV1Data, ViewMeV1Response, ViewMeV1Error, ViewUserV1Data, ViewUserV1Response, ViewUserV1Error, ViewUsersV1Data, ViewUsersV1Response, ViewUsersV1Error, PermissionV1Data, PermissionV1Response, PermissionV1Error, SwaggerData, SwaggerError, StatusData, StatusError, ViewRoleIndexV1Data, ViewRoleIndexV1Response, ViewRoleIndexV1Error, UpdateRolesPermissionsV1Data, UpdateRolesPermissionsV1Response, UpdateRolesPermissionsV1Error, CreateRoleV1Data, CreateRoleV1Error, DeleteRoleV1Data, DeleteRoleV1Error, ViewRoleDetailV1Data, ViewRoleDetailV1Response, ViewRoleDetailV1Error, UpdateRoleV1Data, UpdateRoleV1Error, CreateFileV1Data, CreateFileV1Response, CreateFileV1Error, ConfirmFileUploadV1Data, ConfirmFileUploadV1Error, DeleteFileV1Data, DeleteFileV1Error, DownloadFileV1Data, DownloadFileV1Error, ViewContactIndexV1Data, ViewContactIndexV1Response, ViewContactIndexV1Error, CreateContactV1Data, CreateContactV1Response, CreateContactV1Error, DeleteContactV1Data, DeleteContactV1Error, ViewContactDetailV1Data, ViewContactDetailV1Response, ViewContactDetailV1Error, UpdateContactV1Data, UpdateContactV1Error, ViewUiPreferencesV1Data, ViewUiPreferencesV1Response, ViewUiPreferencesV1Error, UpdateUiPreferencesV1Data, UpdateUiPreferencesV1Error, CreateOneSignalTokenV1Data, CreateOneSignalTokenV1Response, CreateOneSignalTokenV1Error, SendPushNotificationV1Data, SendPushNotificationV1Error, ViewDomainEventLogIndexV1Data, ViewDomainEventLogIndexV1Response, ViewDomainEventLogIndexV1Error, SearchCollectionsV1Data, SearchCollectionsV1Response, SearchCollectionsV1Error } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { zViewMeV1Response, zViewUserV1Response, zViewUsersV1Response, zPermissionV1Response, zViewRoleIndexV1Response, zUpdateRolesPermissionsV1Response, zViewRoleDetailV1Response, zCreateFileV1Response, zViewContactIndexV1Response, zCreateContactV1Response, zViewContactDetailV1Response, zViewUiPreferencesV1Response, zCreateOneSignalTokenV1Response, zViewDomainEventLogIndexV1Response, zSearchCollectionsV1Response } from './zod.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const migrateCollectionsV1 = <ThrowOnError extends boolean = true>(options?: Options<MigrateCollectionsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, MigrateCollectionsV1Error, ThrowOnError>({
        url: '/api/v1/typesense/migrate',
        ...options
    });
};

export const importCollectionsV1 = <ThrowOnError extends boolean = true>(options?: Options<ImportCollectionsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ImportCollectionsV1Error, ThrowOnError>({
        url: '/api/v1/typesense/import',
        ...options
    });
};

export const viewCollectionsV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewCollectionsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ViewCollectionsV1Error, ThrowOnError>({
        url: '/api/v1/typesense/collections',
        ...options
    });
};

export const setUserRolesV1 = <ThrowOnError extends boolean = true>(options: Options<SetUserRolesV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, SetUserRolesV1Error, ThrowOnError>({
        url: '/api/v1/users/{user}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const viewMeV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewMeV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewMeV1Response, ViewMeV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zViewMeV1Response.parseAsync(data);
        },
        url: '/api/v1/users/me',
        ...options
    });
};

export const viewUserV1 = <ThrowOnError extends boolean = true>(options: Options<ViewUserV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ViewUserV1Response, ViewUserV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zViewUserV1Response.parseAsync(data);
        },
        url: '/api/v1/users/{uuid}',
        ...options
    });
};

export const viewUsersV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewUsersV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewUsersV1Response, ViewUsersV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zViewUsersV1Response.parseAsync(data);
        },
        url: '/api/v1/users',
        ...options
    });
};

export const permissionV1 = <ThrowOnError extends boolean = true>(options?: Options<PermissionV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PermissionV1Response, PermissionV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zPermissionV1Response.parseAsync(data);
        },
        url: '/api/v1/permissions',
        ...options
    });
};

export const swagger = <ThrowOnError extends boolean = true>(options?: Options<SwaggerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, SwaggerError, ThrowOnError>({
        url: '/api/oauth2-redirect',
        ...options
    });
};

export const status = <ThrowOnError extends boolean = true>(options?: Options<StatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, StatusError, ThrowOnError>({
        url: '/api',
        ...options
    });
};

export const statusHealth = <ThrowOnError extends boolean = true>(options?: Options<StatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, StatusError, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};

export const viewRoleIndexV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewRoleIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewRoleIndexV1Response, ViewRoleIndexV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zViewRoleIndexV1Response.parseAsync(data);
        },
        url: '/api/v1/roles',
        ...options
    });
};

export const updateRolesPermissionsV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateRolesPermissionsV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateRolesPermissionsV1Response, UpdateRolesPermissionsV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zUpdateRolesPermissionsV1Response.parseAsync(data);
        },
        url: '/api/v1/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createRoleV1 = <ThrowOnError extends boolean = true>(options: Options<CreateRoleV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateRoleV1Error, ThrowOnError>({
        url: '/api/v1/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteRoleV1 = <ThrowOnError extends boolean = true>(options: Options<DeleteRoleV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteRoleV1Error, ThrowOnError>({
        url: '/api/v1/roles/{role}',
        ...options
    });
};

export const viewRoleDetailV1 = <ThrowOnError extends boolean = true>(options: Options<ViewRoleDetailV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ViewRoleDetailV1Response, ViewRoleDetailV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zViewRoleDetailV1Response.parseAsync(data);
        },
        url: '/api/v1/roles/{role}',
        ...options
    });
};

export const updateRoleV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateRoleV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, UpdateRoleV1Error, ThrowOnError>({
        url: '/api/v1/roles/{role}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createFileV1 = <ThrowOnError extends boolean = true>(options: Options<CreateFileV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFileV1Response, CreateFileV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zCreateFileV1Response.parseAsync(data);
        },
        url: '/api/v1/files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const confirmFileUploadV1 = <ThrowOnError extends boolean = true>(options: Options<ConfirmFileUploadV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ConfirmFileUploadV1Error, ThrowOnError>({
        url: '/api/v1/files/{file}/confirm-upload',
        ...options
    });
};

export const deleteFileV1 = <ThrowOnError extends boolean = true>(options: Options<DeleteFileV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteFileV1Error, ThrowOnError>({
        url: '/api/v1/files/{file}',
        ...options
    });
};

export const downloadFileV1 = <ThrowOnError extends boolean = true>(options: Options<DownloadFileV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, DownloadFileV1Error, ThrowOnError>({
        url: '/api/v1/files/{file}/download',
        ...options
    });
};

export const viewContactIndexV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewContactIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewContactIndexV1Response, ViewContactIndexV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zViewContactIndexV1Response.parseAsync(data);
        },
        url: '/api/v1/contacts',
        ...options
    });
};

export const createContactV1 = <ThrowOnError extends boolean = true>(options: Options<CreateContactV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateContactV1Response, CreateContactV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zCreateContactV1Response.parseAsync(data);
        },
        url: '/api/v1/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteContactV1 = <ThrowOnError extends boolean = true>(options: Options<DeleteContactV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteContactV1Error, ThrowOnError>({
        url: '/api/v1/contacts/{uuid}',
        ...options
    });
};

export const viewContactDetailV1 = <ThrowOnError extends boolean = true>(options: Options<ViewContactDetailV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ViewContactDetailV1Response, ViewContactDetailV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zViewContactDetailV1Response.parseAsync(data);
        },
        url: '/api/v1/contacts/{uuid}',
        ...options
    });
};

export const updateContactV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateContactV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateContactV1Error, ThrowOnError>({
        url: '/api/v1/contacts/{uuid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const viewUiPreferencesV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewUiPreferencesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewUiPreferencesV1Response, ViewUiPreferencesV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zViewUiPreferencesV1Response.parseAsync(data);
        },
        url: '/api/v1/me/ui-preferences',
        ...options
    });
};

export const updateUiPreferencesV1 = <ThrowOnError extends boolean = true>(options: Options<UpdateUiPreferencesV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, UpdateUiPreferencesV1Error, ThrowOnError>({
        url: '/api/v1/me/ui-preferences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createOneSignalTokenV1 = <ThrowOnError extends boolean = true>(options?: Options<CreateOneSignalTokenV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateOneSignalTokenV1Response, CreateOneSignalTokenV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zCreateOneSignalTokenV1Response.parseAsync(data);
        },
        url: '/api/v1/onesignal/token',
        ...options
    });
};

export const sendPushNotificationV1 = <ThrowOnError extends boolean = true>(options: Options<SendPushNotificationV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, SendPushNotificationV1Error, ThrowOnError>({
        url: '/api/v1/onesignal/push-notification',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const viewDomainEventLogIndexV1 = <ThrowOnError extends boolean = true>(options?: Options<ViewDomainEventLogIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewDomainEventLogIndexV1Response, ViewDomainEventLogIndexV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zViewDomainEventLogIndexV1Response.parseAsync(data);
        },
        url: '/api/v1/event-logs',
        ...options
    });
};

export const searchCollectionsV1 = <ThrowOnError extends boolean = true>(options: Options<SearchCollectionsV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchCollectionsV1Response, SearchCollectionsV1Error, ThrowOnError>({
        responseValidator: async (data) => {
            return await zSearchCollectionsV1Response.parseAsync(data);
        },
        url: '/api/v1/search',
        ...options
    });
};