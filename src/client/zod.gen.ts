// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zSetUserRolesCommand = z.object({
    roleUuids: z.array(z.string().uuid())
});

export const zPermission = z.enum([
    'all_permissions',
    'contact.create',
    'contact.read',
    'contact.update',
    'contact.delete',
    'event-log.read',
    'file.read',
    'file.create',
    'file.delete',
    'role.read',
    'role.create',
    'role.update',
    'role.delete',
    'send_push_notification',
    'typesense',
    'user.read',
    'user.create',
    'user.update',
    'user.delete'
]);

export const zViewRoleDetailResponse = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    name: z.string(),
    permissions: z.array(zPermission),
    isDefault: z.boolean(),
    isSystemAdmin: z.boolean()
});

export const zViewMeResponse = z.object({
    uuid: z.string().uuid(),
    email: z.string().email(),
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    roles: z.array(zViewRoleDetailResponse)
});

export const zViewUserResponse = z.object({
    uuid: z.string().uuid(),
    email: z.string().email(),
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    roles: z.array(zViewRoleDetailResponse)
});

export const zPaginatedOffsetQuery = z.object({
    limit: z.number().gte(1).lte(100),
    offset: z.number().gte(0)
});

export const zUserIndexView = z.object({
    uuid: z.string().uuid(),
    email: z.string().email(),
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ])
});

export const zPaginatedOffsetResponseMeta = z.object({
    total: z.number(),
    offset: z.number(),
    limit: z.number()
});

export const zViewUsersResponse = z.object({
    items: z.array(zUserIndexView),
    meta: zPaginatedOffsetResponseMeta
});

export const zCreateRoleCommand = z.object({
    name: z.string()
});

export const zUpdateRoleCommand = z.object({
    name: z.string()
});

export const zRoleResponse = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    name: z.string(),
    permissions: z.array(zPermission),
    isDefault: z.boolean(),
    isSystemAdmin: z.boolean()
});

export const zViewRoleIndexResponse = z.object({
    items: z.array(zRoleResponse)
});

export const zRoleNotFoundError = z.object({
    detail: z.string().optional(),
    status: z.enum([
        '404'
    ]),
    code: z.enum([
        'role_not_found'
    ])
});

export const zUpdateRolesPermissionsCommandItem = z.object({
    roleUuid: z.string().uuid(),
    permissions: z.array(zPermission)
});

export const zUpdateRolesPermissionsCommand = z.object({
    roles: z.array(zUpdateRolesPermissionsCommandItem)
});

export const zMimeType = z.enum([
    'application/pdf',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.ms-powerpoint',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    'text/plain',
    'text/html',
    'image/jpeg',
    'image/png',
    'image/tiff',
    'image/bmp',
    'image/heic',
    'image/webp',
    'image/gif'
]);

export const zCreateFileCommand = z.object({
    name: z.string(),
    mimeType: zMimeType
});

export const zCreateFileResponse = z.object({
    uuid: z.string().uuid(),
    name: z.string(),
    mimeType: z.union([
        zMimeType,
        z.null()
    ]),
    uploadUrl: z.string()
});

export const zCreateContactCommand = z.object({
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    email: z.union([
        z.string().email(),
        z.null()
    ]),
    phone: z.union([
        z.string(),
        z.null()
    ])
});

export const zCreateContactResponse = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    isActive: z.boolean(),
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    email: z.union([
        z.string().email(),
        z.null()
    ]),
    phone: z.union([
        z.string(),
        z.null()
    ])
});

export const zUpdateContactCommand = z.object({
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    email: z.union([
        z.string().email(),
        z.null()
    ]),
    phone: z.union([
        z.string(),
        z.null()
    ]),
    isActive: z.boolean()
});

export const zViewContactDetailResponse = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    isActive: z.boolean(),
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    email: z.union([
        z.string().email(),
        z.null()
    ]),
    phone: z.union([
        z.string(),
        z.null()
    ])
});

export const zViewContactIndexFilterQuery = z.object({
    isActive: z.string().optional()
});

export const zContactResponse = z.object({
    uuid: z.string().uuid(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    isActive: z.boolean(),
    firstName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.union([
        z.string(),
        z.null()
    ]),
    email: z.union([
        z.string().email(),
        z.null()
    ]),
    phone: z.union([
        z.string(),
        z.null()
    ])
});

export const zViewContactIndexResponse = z.object({
    items: z.array(zContactResponse),
    meta: zPaginatedOffsetResponseMeta
});

export const zTheme = z.enum([
    'light',
    'dark',
    'system'
]);

export const zUpdatePreferencesCommand = z.object({
    theme: zTheme.optional(),
    language: z.string().optional(),
    fontSize: z.string().optional(),
    showShortcuts: z.boolean().optional(),
    reduceMotion: z.boolean().optional(),
    highContrast: z.boolean().optional()
});

export const zViewPreferencesResponse = z.object({
    theme: zTheme,
    language: z.union([
        z.string(),
        z.null()
    ]),
    fontSize: z.union([
        z.string(),
        z.null()
    ]),
    showShortcuts: z.boolean(),
    reduceMotion: z.boolean(),
    highContrast: z.boolean()
});

export const zCreateOneSignalTokenResponse = z.object({
    token: z.string(),
    userUuid: z.string().uuid()
});

export const zTranslations = z.object({
    nl: z.string().optional(),
    en: z.string().optional()
});

export const zSendPushNotificationCommand = z.object({
    name: z.string(),
    title: zTranslations,
    description: zTranslations,
    userUuids: z.array(z.string().uuid())
});

export const zViewEventLogIndexQueryKey = z.object({
    createdAt: z.string(),
    uuid: z.string().uuid()
});

export const zViewEventLogIndexPaginationQuery = z.object({
    limit: z.number().gte(0).lte(100),
    key: z.union([
        zViewEventLogIndexQueryKey,
        z.null()
    ]).optional()
});

export const zUserCreatedEventContent = z.object({
    userUuid: z.string().uuid()
});

export const zUserCreatedEventLog = z.object({
    uuid: z.string().uuid(),
    topic: z.string(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'user.created'
    ]),
    content: zUserCreatedEventContent
});

export const zRoleAssignedToUserEventContent = z.object({
    userUuid: z.string().uuid(),
    roleUuid: z.string().uuid()
});

export const zUserRoleAssignedEventLog = z.object({
    uuid: z.string().uuid(),
    topic: z.string(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'user.role-assigned'
    ]),
    content: zRoleAssignedToUserEventContent
});

export const zUpdatedRole = z.object({
    uuid: z.string().uuid(),
    newPermissions: z.array(zPermission)
});

export const zRolePermissionsUpdatedEventContent = z.object({
    roles: z.array(zUpdatedRole)
});

export const zRolesPermissionsUpdatedEventLog = z.object({
    uuid: z.string().uuid(),
    topic: z.string(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ]),
    type: z.enum([
        'roles.permissions.updated'
    ]),
    content: zRolePermissionsUpdatedEventContent
});

export const zEventLogResponse = z.object({
    uuid: z.string().uuid(),
    topic: z.string(),
    createdAt: z.string().datetime(),
    version: z.number().int().gte(0),
    source: z.string(),
    userUuid: z.union([
        z.string().uuid(),
        z.null()
    ])
});

export const zViewEventLogIndexResponseMeta = z.object({
    next: z.union([
        zViewEventLogIndexQueryKey,
        z.null()
    ])
});

export const zViewEventLogIndexResponse = z.object({
    items: z.array(z.unknown()),
    meta: zViewEventLogIndexResponseMeta
});

export const zGlobalSearchCollectionName = z.enum([
    'user'
]);

export const zSearchCollectionsFilterQuery = z.object({
    collections: z.array(zGlobalSearchCollectionName).optional()
});

export const zSearchCollectionUserResponse = z.object({
    uuid: z.string().uuid(),
    name: z.string(),
    email: z.string().email()
});

export const zSearchCollectionsResponseItem = z.object({
    collection: zGlobalSearchCollectionName,
    entity: zSearchCollectionUserResponse,
    text_match: z.number()
});

export const zSearchCollectionsResponse = z.object({
    items: z.array(zSearchCollectionsResponseItem)
});

export const zInternalServerApiError = z.object({
    detail: z.string().optional(),
    status: z.enum([
        '500'
    ]),
    code: z.enum([
        'internal_server_error'
    ])
});

export const zPermissionV1Response = z.array(z.string());

export const zViewMeV1Response = zViewMeResponse;

export const zViewUserV1Response = zViewUserResponse;

export const zViewUsersV1Response = zViewUsersResponse;

export const zViewRoleIndexV1Response = zViewRoleIndexResponse;

export const zUpdateRolesPermissionsV1Response = z.void();

export const zViewRoleDetailV1Response = zViewRoleDetailResponse;

export const zCreateFileV1Response = zCreateFileResponse;

export const zViewContactIndexV1Response = zViewContactIndexResponse;

export const zCreateContactV1Response = zCreateContactResponse;

export const zViewContactDetailV1Response = zViewContactDetailResponse;

export const zViewPreferencesV1Response = zViewPreferencesResponse;

export const zCreateOneSignalTokenV1Response = zCreateOneSignalTokenResponse;

export const zViewEventLogIndexV1Response = zViewEventLogIndexResponse;

export const zSearchCollectionsV1Response = zSearchCollectionsResponse;