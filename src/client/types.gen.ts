// This file is auto-generated by @hey-api/openapi-ts

export type SetUserRolesCommand = {
    roleUuids: Array<string>;
};

export enum Permission {
    ALL_PERMISSIONS = 'all_permissions',
    CONTACT_CREATE = 'contact.create',
    CONTACT_READ = 'contact.read',
    CONTACT_UPDATE = 'contact.update',
    CONTACT_DELETE = 'contact.delete',
    EVENT_LOG_READ = 'event-log.read',
    FILE_READ = 'file.read',
    FILE_CREATE = 'file.create',
    FILE_DELETE = 'file.delete',
    ROLE_READ = 'role.read',
    ROLE_CREATE = 'role.create',
    ROLE_UPDATE = 'role.update',
    ROLE_DELETE = 'role.delete',
    SEND_PUSH_NOTIFICATION = 'send_push_notification',
    TYPESENSE = 'typesense',
    USER_READ = 'user.read',
    USER_CREATE = 'user.create',
    USER_UPDATE = 'user.update',
    USER_DELETE = 'user.delete'
}

export type ViewRoleDetailResponse = {
    uuid: string;
    createdAt: string;
    updatedAt: string;
    name: string;
    permissions: Array<Permission>;
    isDefault: boolean;
    isSystemAdmin: boolean;
};

export type ViewMeResponse = {
    uuid: string;
    email: string;
    firstName: string | null;
    lastName: string | null;
    roles: Array<ViewRoleDetailResponse>;
};

export type ViewUserResponse = {
    uuid: string;
    email: string;
    firstName: string | null;
    lastName: string | null;
    roles: Array<ViewRoleDetailResponse>;
};

export type PaginatedOffsetQuery = {
    limit: number;
    offset: number;
};

export type UserIndexView = {
    uuid: string;
    email: string;
    firstName: string | null;
    lastName: string | null;
};

export type PaginatedOffsetResponseMeta = {
    /**
     * the total amount of items that exist
     */
    total: number;
    /**
     * the amount of items skipped
     */
    offset: number;
    /**
     * the amount of items per response
     */
    limit: number;
};

export type ViewUsersResponse = {
    /**
     * The items for the current page
     */
    items: Array<UserIndexView>;
    meta: PaginatedOffsetResponseMeta;
};

export type CreateRoleCommand = {
    /**
     * The name of the role
     */
    name: string;
};

export type UpdateRoleCommand = {
    /**
     * The name of the role
     */
    name: string;
};

export type RoleResponse = {
    uuid: string;
    createdAt: string;
    updatedAt: string;
    name: string;
    permissions: Array<Permission>;
    isDefault: boolean;
    isSystemAdmin: boolean;
};

export type ViewRoleIndexResponse = {
    items: Array<RoleResponse>;
};

export type RoleNotFoundError = {
    /**
     * a human-readable explanation specific to this occurrence of the problem
     */
    detail?: string;
    status: '404';
    code: 'role_not_found';
};

export type UpdateRolesPermissionsCommandItem = {
    roleUuid: string;
    permissions: Array<Permission>;
};

export type UpdateRolesPermissionsCommand = {
    roles: Array<UpdateRolesPermissionsCommandItem>;
};

export enum MimeType {
    APPLICATION_PDF = 'application/pdf',
    APPLICATION_MSWORD = 'application/msword',
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    APPLICATION_VND_MS_POWERPOINT = 'application/vnd.ms-powerpoint',
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION = 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    TEXT_PLAIN = 'text/plain',
    TEXT_HTML = 'text/html',
    IMAGE_JPEG = 'image/jpeg',
    IMAGE_PNG = 'image/png',
    IMAGE_TIFF = 'image/tiff',
    IMAGE_BMP = 'image/bmp',
    IMAGE_HEIC = 'image/heic',
    IMAGE_WEBP = 'image/webp',
    IMAGE_GIF = 'image/gif'
}

export type CreateFileCommand = {
    name: string;
    mimeType: MimeType;
};

export type CreateFileResponse = {
    uuid: string;
    name: string;
    mimeType: MimeType | null;
    uploadUrl: string;
};

export type CreateContactCommand = {
    firstName: string | null;
    lastName: string | null;
    email: string | null;
    phone: string | null;
};

export type CreateContactResponse = {
    uuid: string;
    createdAt: string;
    updatedAt: string;
    isActive: boolean;
    firstName: string | null;
    lastName: string | null;
    email: string | null;
    phone: string | null;
};

export type UpdateContactCommand = {
    firstName: string | null;
    lastName: string | null;
    email: string | null;
    phone: string | null;
    isActive: boolean;
};

export type ViewContactDetailResponse = {
    uuid: string;
    createdAt: string;
    updatedAt: string;
    isActive: boolean;
    firstName: string | null;
    lastName: string | null;
    email: string | null;
    phone: string | null;
};

export type ViewContactIndexFilterQuery = {
    isActive?: string;
};

export type ContactResponse = {
    uuid: string;
    createdAt: string;
    updatedAt: string;
    isActive: boolean;
    firstName: string | null;
    lastName: string | null;
    email: string | null;
    phone: string | null;
};

export type ViewContactIndexResponse = {
    /**
     * The items for the current page
     */
    items: Array<ContactResponse>;
    meta: PaginatedOffsetResponseMeta;
};

export enum UiTheme {
    LIGHT = 'light',
    DARK = 'dark',
    SYSTEM = 'system'
}

export enum Locale {
    EN_US = 'en-US',
    NL_BE= 'nl-BE'
}

export enum FontSize {
    SMALLER = 'smaller',
    SMALL = 'small',
    DEFAULT = 'default',
    LARGE = 'large',
    LARGER = 'larger'
}

export type UpdateUiPreferencesCommand = {
    theme?: UiTheme;
    language?: Locale;
    fontSize?: FontSize;
    showShortcuts?: boolean;
    reduceMotion?: boolean;
    highContrast?: boolean;
};

export type ViewUiPreferencesResponse = {
    theme: UiTheme;
    language: Locale;
    fontSize: FontSize;
    showShortcuts: boolean;
    reduceMotion: boolean;
    highContrast: boolean;
};

export type CreateOneSignalTokenResponse = {
    token: string;
    userUuid: string;
};

export type Translations = {
    nl?: string;
    en?: string;
};

export type SendPushNotificationCommand = {
    name: string;
    title: Translations;
    description: Translations;
    userUuids: Array<string>;
};

export type ViewDomainEventLogIndexQueryKey = {
    createdAt: string;
    uuid: string;
};

export type ViewDomainEventLogIndexPaginationQuery = {
    limit: number;
    key?: ViewDomainEventLogIndexQueryKey | null;
};

export type UserCreatedEventContent = {
    userUuid: string;
};

export type UserCreatedDomainEventLog = {
    uuid: string;
    topic: string;
    createdAt: string;
    version: number;
    source: string;
    userUuid: string | null;
    message: string;
    type: 'user.created';
    content: UserCreatedEventContent;
};

export type RoleAssignedToUserEventContent = {
    userUuid: string;
    roleUuid: string;
};

export type UserRoleAssignedDomainEventLog = {
    uuid: string;
    topic: string;
    createdAt: string;
    version: number;
    source: string;
    userUuid: string | null;
    message: string;
    type: 'user.role-assigned';
    content: RoleAssignedToUserEventContent;
};

export type UpdatedRole = {
    uuid: string;
    newPermissions: Array<Permission>;
};

export type RolePermissionsUpdatedEventContent = {
    roles: Array<UpdatedRole>;
};

export type RolesPermissionsUpdatedDomainEventLog = {
    uuid: string;
    topic: string;
    createdAt: string;
    version: number;
    source: string;
    userUuid: string | null;
    message: string;
    type: 'roles.permissions.updated';
    content: RolePermissionsUpdatedEventContent;
};

export type DomainEventLogResponse = {
    uuid: string;
    topic: string;
    createdAt: string;
    version: number;
    source: string;
    userUuid: string | null;
    message: string;
};

export type ViewDomainEventLogIndexResponseMeta = {
    next: ViewDomainEventLogIndexQueryKey | null;
};

export type ViewDomainEventLogIndexResponse = {
    items: Array<UserCreatedDomainEventLog | UserRoleAssignedDomainEventLog | RolesPermissionsUpdatedDomainEventLog>;
    meta: ViewDomainEventLogIndexResponseMeta;
};

export enum GlobalSearchCollectionName {
    USER = 'user'
}

export type SearchCollectionsFilterQuery = {
    collections?: Array<GlobalSearchCollectionName>;
};

export type SearchCollectionUserResponse = {
    uuid: string;
    name: string;
    email: string;
};

export type SearchCollectionsResponseItem = {
    collection: GlobalSearchCollectionName;
    entity: SearchCollectionUserResponse;
    text_match: number;
};

export type SearchCollectionsResponse = {
    items: Array<SearchCollectionsResponseItem>;
};

export type InternalServerApiError = {
    /**
     * a human-readable explanation specific to this occurrence of the problem
     */
    detail?: string;
    status: '500';
    code: 'internal_server_error';
};

export type MigrateCollectionsV1Data = {
    body?: never;
    path?: never;
    query?: {
        collections?: Array<'user'>;
        fresh?: boolean;
    };
    url: '/api/v1/typesense/migrate';
};

export type MigrateCollectionsV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type MigrateCollectionsV1Error = MigrateCollectionsV1Errors[keyof MigrateCollectionsV1Errors];

export type MigrateCollectionsV1Responses = {
    /**
     * Successfully migrated collections
     */
    200: unknown;
};

export type ImportCollectionsV1Data = {
    body?: never;
    path?: never;
    query?: {
        collections?: Array<'user'>;
    };
    url: '/api/v1/typesense/import';
};

export type ImportCollectionsV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ImportCollectionsV1Error = ImportCollectionsV1Errors[keyof ImportCollectionsV1Errors];

export type ImportCollectionsV1Responses = {
    /**
     * Successfully imported collections
     */
    200: unknown;
};

export type ViewCollectionsV1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/typesense/collections';
};

export type ViewCollectionsV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ViewCollectionsV1Error = ViewCollectionsV1Errors[keyof ViewCollectionsV1Errors];

export type ViewCollectionsV1Responses = {
    /**
     * Successfully returned collections
     */
    200: unknown;
};

export type SetUserRolesV1Data = {
    body: SetUserRolesCommand;
    path: {
        user: string;
    };
    query?: never;
    url: '/api/v1/users/{user}/role';
};

export type SetUserRolesV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type SetUserRolesV1Error = SetUserRolesV1Errors[keyof SetUserRolesV1Errors];

export type SetUserRolesV1Responses = {
    201: unknown;
};

export type ViewMeV1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type ViewMeV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ViewMeV1Error = ViewMeV1Errors[keyof ViewMeV1Errors];

export type ViewMeV1Responses = {
    /**
     * User details retrieved
     */
    200: ViewMeResponse;
};

export type ViewMeV1Response = ViewMeV1Responses[keyof ViewMeV1Responses];

export type ViewUserV1Data = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/v1/users/{uuid}';
};

export type ViewUserV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ViewUserV1Error = ViewUserV1Errors[keyof ViewUserV1Errors];

export type ViewUserV1Responses = {
    /**
     * User details retrieved
     */
    200: ViewUserResponse;
};

export type ViewUserV1Response = ViewUserV1Responses[keyof ViewUserV1Responses];

export type ViewUsersV1Data = {
    body?: never;
    path?: never;
    query?: {
        pagination?: PaginatedOffsetQuery;
        search?: string;
    };
    url: '/api/v1/users';
};

export type ViewUsersV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ViewUsersV1Error = ViewUsersV1Errors[keyof ViewUsersV1Errors];

export type ViewUsersV1Responses = {
    /**
     * Users retrieved
     */
    200: ViewUsersResponse;
};

export type ViewUsersV1Response = ViewUsersV1Responses[keyof ViewUsersV1Responses];

export type PermissionV1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/permissions';
};

export type PermissionV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type PermissionV1Error = PermissionV1Errors[keyof PermissionV1Errors];

export type PermissionV1Responses = {
    200: Array<string>;
};

export type PermissionV1Response = PermissionV1Responses[keyof PermissionV1Responses];

export type SwaggerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/oauth2-redirect';
};

export type SwaggerErrors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type SwaggerError = SwaggerErrors[keyof SwaggerErrors];

export type SwaggerResponses = {
    200: unknown;
};

export type StatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api';
};

export type StatusErrors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type StatusError = StatusErrors[keyof StatusErrors];

export type ViewRoleIndexV1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/roles';
};

export type ViewRoleIndexV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ViewRoleIndexV1Error = ViewRoleIndexV1Errors[keyof ViewRoleIndexV1Errors];

export type ViewRoleIndexV1Responses = {
    /**
     * The roles has been successfully received.
     */
    200: ViewRoleIndexResponse;
};

export type ViewRoleIndexV1Response = ViewRoleIndexV1Responses[keyof ViewRoleIndexV1Responses];

export type UpdateRolesPermissionsV1Data = {
    body: UpdateRolesPermissionsCommand;
    path?: never;
    query?: never;
    url: '/api/v1/roles';
};

export type UpdateRolesPermissionsV1Errors = {
    404: {
        traceId?: string | null;
        errors?: Array<RoleNotFoundError>;
    };
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type UpdateRolesPermissionsV1Error = UpdateRolesPermissionsV1Errors[keyof UpdateRolesPermissionsV1Errors];

export type UpdateRolesPermissionsV1Responses = {
    204: void;
};

export type UpdateRolesPermissionsV1Response = UpdateRolesPermissionsV1Responses[keyof UpdateRolesPermissionsV1Responses];

export type CreateRoleV1Data = {
    body: CreateRoleCommand;
    path?: never;
    query?: never;
    url: '/api/v1/roles';
};

export type CreateRoleV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type CreateRoleV1Error = CreateRoleV1Errors[keyof CreateRoleV1Errors];

export type CreateRoleV1Responses = {
    201: unknown;
};

export type DeleteRoleV1Data = {
    body?: never;
    path: {
        role: string;
    };
    query?: never;
    url: '/api/v1/roles/{role}';
};

export type DeleteRoleV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type DeleteRoleV1Error = DeleteRoleV1Errors[keyof DeleteRoleV1Errors];

export type DeleteRoleV1Responses = {
    200: unknown;
};

export type ViewRoleDetailV1Data = {
    body?: never;
    path: {
        role: string;
    };
    query?: never;
    url: '/api/v1/roles/{role}';
};

export type ViewRoleDetailV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ViewRoleDetailV1Error = ViewRoleDetailV1Errors[keyof ViewRoleDetailV1Errors];

export type ViewRoleDetailV1Responses = {
    /**
     * The role has been successfully received.
     */
    200: ViewRoleDetailResponse;
};

export type ViewRoleDetailV1Response = ViewRoleDetailV1Responses[keyof ViewRoleDetailV1Responses];

export type UpdateRoleV1Data = {
    body: UpdateRoleCommand;
    path: {
        role: string;
    };
    query?: never;
    url: '/api/v1/roles/{role}';
};

export type UpdateRoleV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type UpdateRoleV1Error = UpdateRoleV1Errors[keyof UpdateRoleV1Errors];

export type UpdateRoleV1Responses = {
    201: unknown;
};

export type CreateFileV1Data = {
    body: CreateFileCommand;
    path?: never;
    query?: never;
    url: '/api/v1/files';
};

export type CreateFileV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type CreateFileV1Error = CreateFileV1Errors[keyof CreateFileV1Errors];

export type CreateFileV1Responses = {
    201: CreateFileResponse;
};

export type CreateFileV1Response = CreateFileV1Responses[keyof CreateFileV1Responses];

export type ConfirmFileUploadV1Data = {
    body?: never;
    path: {
        file: string;
    };
    query?: never;
    url: '/api/v1/files/{file}/confirm-upload';
};

export type ConfirmFileUploadV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ConfirmFileUploadV1Error = ConfirmFileUploadV1Errors[keyof ConfirmFileUploadV1Errors];

export type ConfirmFileUploadV1Responses = {
    200: unknown;
};

export type DeleteFileV1Data = {
    body?: never;
    path: {
        file: string;
    };
    query?: never;
    url: '/api/v1/files/{file}';
};

export type DeleteFileV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type DeleteFileV1Error = DeleteFileV1Errors[keyof DeleteFileV1Errors];

export type DeleteFileV1Responses = {
    200: unknown;
};

export type DownloadFileV1Data = {
    body?: never;
    path: {
        file: string;
    };
    query?: never;
    url: '/api/v1/files/{file}/download';
};

export type DownloadFileV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type DownloadFileV1Error = DownloadFileV1Errors[keyof DownloadFileV1Errors];

export type ViewContactIndexV1Data = {
    body?: never;
    path?: never;
    query?: {
        pagination?: PaginatedOffsetQuery;
        filter?: ViewContactIndexFilterQuery;
    };
    url: '/api/v1/contacts';
};

export type ViewContactIndexV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ViewContactIndexV1Error = ViewContactIndexV1Errors[keyof ViewContactIndexV1Errors];

export type ViewContactIndexV1Responses = {
    200: ViewContactIndexResponse;
};

export type ViewContactIndexV1Response = ViewContactIndexV1Responses[keyof ViewContactIndexV1Responses];

export type CreateContactV1Data = {
    body: CreateContactCommand;
    path?: never;
    query?: never;
    url: '/api/v1/contacts';
};

export type CreateContactV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type CreateContactV1Error = CreateContactV1Errors[keyof CreateContactV1Errors];

export type CreateContactV1Responses = {
    201: CreateContactResponse;
};

export type CreateContactV1Response = CreateContactV1Responses[keyof CreateContactV1Responses];

export type DeleteContactV1Data = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/v1/contacts/{uuid}';
};

export type DeleteContactV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type DeleteContactV1Error = DeleteContactV1Errors[keyof DeleteContactV1Errors];

export type DeleteContactV1Responses = {
    200: unknown;
};

export type ViewContactDetailV1Data = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/v1/contacts/{uuid}';
};

export type ViewContactDetailV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ViewContactDetailV1Error = ViewContactDetailV1Errors[keyof ViewContactDetailV1Errors];

export type ViewContactDetailV1Responses = {
    200: ViewContactDetailResponse;
};

export type ViewContactDetailV1Response = ViewContactDetailV1Responses[keyof ViewContactDetailV1Responses];

export type UpdateContactV1Data = {
    body: UpdateContactCommand;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/v1/contacts/{uuid}';
};

export type UpdateContactV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type UpdateContactV1Error = UpdateContactV1Errors[keyof UpdateContactV1Errors];

export type UpdateContactV1Responses = {
    200: unknown;
};

export type ViewUiPreferencesV1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/me/ui-preferences';
};

export type ViewUiPreferencesV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ViewUiPreferencesV1Error = ViewUiPreferencesV1Errors[keyof ViewUiPreferencesV1Errors];

export type ViewUiPreferencesV1Responses = {
    200: ViewUiPreferencesResponse;
};

export type ViewUiPreferencesV1Response = ViewUiPreferencesV1Responses[keyof ViewUiPreferencesV1Responses];

export type UpdateUiPreferencesV1Data = {
    body: UpdateUiPreferencesCommand;
    path?: never;
    query?: never;
    url: '/api/v1/me/ui-preferences';
};

export type UpdateUiPreferencesV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type UpdateUiPreferencesV1Error = UpdateUiPreferencesV1Errors[keyof UpdateUiPreferencesV1Errors];

export type UpdateUiPreferencesV1Responses = {
    200: unknown;
};

export type CreateOneSignalTokenV1Data = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/onesignal/token';
};

export type CreateOneSignalTokenV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type CreateOneSignalTokenV1Error = CreateOneSignalTokenV1Errors[keyof CreateOneSignalTokenV1Errors];

export type CreateOneSignalTokenV1Responses = {
    201: CreateOneSignalTokenResponse;
};

export type CreateOneSignalTokenV1Response = CreateOneSignalTokenV1Responses[keyof CreateOneSignalTokenV1Responses];

export type SendPushNotificationV1Data = {
    body: SendPushNotificationCommand;
    path?: never;
    query?: never;
    url: '/api/v1/onesignal/push-notification';
};

export type SendPushNotificationV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type SendPushNotificationV1Error = SendPushNotificationV1Errors[keyof SendPushNotificationV1Errors];

export type SendPushNotificationV1Responses = {
    201: unknown;
};

export type ViewDomainEventLogIndexV1Data = {
    body?: never;
    path?: never;
    query?: {
        pagination?: ViewDomainEventLogIndexPaginationQuery;
    };
    url: '/api/v1/event-logs';
};

export type ViewDomainEventLogIndexV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type ViewDomainEventLogIndexV1Error = ViewDomainEventLogIndexV1Errors[keyof ViewDomainEventLogIndexV1Errors];

export type ViewDomainEventLogIndexV1Responses = {
    200: ViewDomainEventLogIndexResponse;
};

export type ViewDomainEventLogIndexV1Response = ViewDomainEventLogIndexV1Responses[keyof ViewDomainEventLogIndexV1Responses];

export type SearchCollectionsV1Data = {
    body?: never;
    path?: never;
    query: {
        filter: SearchCollectionsFilterQuery;
        search: string;
    };
    url: '/api/v1/search';
};

export type SearchCollectionsV1Errors = {
    500: {
        traceId?: string | null;
        errors?: Array<InternalServerApiError>;
    };
};

export type SearchCollectionsV1Error = SearchCollectionsV1Errors[keyof SearchCollectionsV1Errors];

export type SearchCollectionsV1Responses = {
    200: SearchCollectionsResponse;
};

export type SearchCollectionsV1Response = SearchCollectionsV1Responses[keyof SearchCollectionsV1Responses];

export type ClientOptions = {
    baseUrl: 'https://example.development.appwi.se' | 'http://localhost:3000' | 'https://example.test.appwi.se' | 'https://example.qa.appwi.se' | 'https://example.staging.appwi.se' | 'https://example.production.appwi.se' | (string & {});
};